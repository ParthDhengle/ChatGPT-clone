"use client"

import { useState, useCallback } from "react"

export interface Message {
  id: string
  role: "user" | "assistant"
  content: string
  timestamp: Date
}

export interface Chat {
  id: string
  title: string
  messages: Message[]
  createdAt: Date
  updatedAt: Date
}

// Mock chat data
const mockChats: Chat[] = [
  {
    id: "1",
    title: "Getting Started with React",
    messages: [
      {
        id: "1",
        role: "user",
        content: "How do I get started with React?",
        timestamp: new Date("2024-01-15T10:00:00Z"),
      },
      {
        id: "2",
        role: "assistant",
        content:
          "React is a JavaScript library for building user interfaces. To get started, you can create a new React app using Create React App or Vite. Here's how:\n\n```bash\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\nThis will create a new React application with all the necessary dependencies and start a development server.",
        timestamp: new Date("2024-01-15T10:00:30Z"),
      },
    ],
    createdAt: new Date("2024-01-15T10:00:00Z"),
    updatedAt: new Date("2024-01-15T10:00:30Z"),
  },
  {
    id: "2",
    title: "TypeScript Best Practices",
    messages: [
      {
        id: "3",
        role: "user",
        content: "What are some TypeScript best practices?",
        timestamp: new Date("2024-01-14T15:30:00Z"),
      },
      {
        id: "4",
        role: "assistant",
        content:
          "Here are some TypeScript best practices:\n\n1. **Use strict mode** - Enable strict type checking\n2. **Define interfaces** - Use interfaces for object shapes\n3. **Avoid `any`** - Use specific types instead\n4. **Use union types** - For values that can be multiple types\n5. **Leverage type guards** - For runtime type checking\n\nExample:\n```typescript\ninterface User {\n  id: number;\n  name: string;\n  email?: string;\n}\n```",
        timestamp: new Date("2024-01-14T15:30:45Z"),
      },
    ],
    createdAt: new Date("2024-01-14T15:30:00Z"),
    updatedAt: new Date("2024-01-14T15:30:45Z"),
  },
]

export const useChat = () => {
  const [chats, setChats] = useState<Chat[]>(mockChats)
  const [currentChatId, setCurrentChatId] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(false)

  const currentChat = chats.find((chat) => chat.id === currentChatId)

  const createNewChat = useCallback(() => {
    const newChat: Chat = {
      id: Date.now().toString(),
      title: "New Chat",
      messages: [],
      createdAt: new Date(),
      updatedAt: new Date(),
    }
    setChats((prev) => [newChat, ...prev])
    setCurrentChatId(newChat.id)
    return newChat.id
  }, [])

  const deleteChat = useCallback(
    (chatId: string) => {
      setChats((prev) => prev.filter((chat) => chat.id !== chatId))
      if (currentChatId === chatId) {
        setCurrentChatId(null)
      }
    },
    [currentChatId],
  )

  const sendMessage = useCallback(
    async (content: string) => {
      if (!currentChatId) return

      const userMessage: Message = {
        id: Date.now().toString(),
        role: "user",
        content,
        timestamp: new Date(),
      }

      // Add user message
      setChats((prev) =>
        prev.map((chat) =>
          chat.id === currentChatId
            ? {
                ...chat,
                messages: [...chat.messages, userMessage],
                title:
                  chat.messages.length === 0 ? content.slice(0, 50) + (content.length > 50 ? "..." : "") : chat.title,
                updatedAt: new Date(),
              }
            : chat,
        ),
      )

      setIsLoading(true)

      // Simulate API call delay
      setTimeout(
        () => {
          const assistantMessage: Message = {
            id: (Date.now() + 1).toString(),
            role: "assistant",
            content: `This is a mock response to: "${content}". In a real implementation, this would be generated by your AI backend.`,
            timestamp: new Date(),
          }

          setChats((prev) =>
            prev.map((chat) =>
              chat.id === currentChatId
                ? {
                    ...chat,
                    messages: [...chat.messages, assistantMessage],
                    updatedAt: new Date(),
                  }
                : chat,
            ),
          )

          setIsLoading(false)
        },
        1000 + Math.random() * 2000,
      ) // Random delay between 1-3 seconds
    },
    [currentChatId],
  )

  const selectChat = useCallback((chatId: string) => {
    setCurrentChatId(chatId)
  }, [])

  return {
    chats,
    currentChat,
    currentChatId,
    isLoading,
    createNewChat,
    deleteChat,
    sendMessage,
    selectChat,
  }
}
